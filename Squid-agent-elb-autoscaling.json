{
    "Description": "Create squid ec2 instance.",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "TagKey": {
        "Description": "The EC2 tag key that identifies this as a target for deployments.",
        "Type": "String",
        "Default": "Name",
        "AllowedPattern": "[\\x20-\\x7E]*",
        "ConstraintDescription": "Can contain only ASCII characters."
      },
      "TagValue": {
        "Description": "The EC2 tag value that identifies this as a target for deployments.",
        "Type": "String",
        "Default": "Squid",
        "AllowedPattern": "[\\x20-\\x7E]*",
        "ConstraintDescription": "Can contain only ASCII characters."
      },
      "KeyPairName": {
        "Description": "Name of an existing Amazon EC2 key pair to enable SSH",
        "Type": "String",
        "Default": "demo",
        "MinLength": "1",
        "MaxLength": "255",
        "AllowedPattern": "[\\x20-\\x7E]*",
        "ConstraintDescription": "KeyPairName is a required Field and can contain only ASCII characters."
      },
      "InstanceType": {
        "Description": "Amazon EC2 instance type.",
        "Type": "String",
        "Default": "t2.micro",
        "ConstraintDescription": "Must be a valid Amazon EC2 instance type."
        "AllowedValues": [
          "t1.micro",
          "t2.micro",
          "t2.small",
          "t2.medium",
          "m1.large",
          "m3.xlarge",
          "c4.2xlarge"
        ],
      },
      "InstanceCount": {
        "Description": "Number of Amazon EC2 instances (Must be a number between 1 and 3).",
        "Type": "Number",
        "Default": "1",
        "ConstraintDescription": "Must be a number between 1 and 3.",
        "MinValue": "1",
        "MaxValue": "3"
      },
      "OperatingSystem": {
        "Description": "Amazon EC2 operating system type (Linux or Redhat).",
        "Type": "String",
        "Default": "Redhat",
        "ConstraintDescription": "Must be Redhat or Linux. (Linux means Amazon linux)",
        "AllowedValues": [
          "Linux",
          "Redhat"
        ]
      },
      "SSHLocation": {
        "Description": "The IP address range that can be used to connect using SSH to the Amazon EC2 instances.",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },

    "Mappings": {
        "RegionOS2AMI": {
          "us-east-1": {
            "Linux": "ami-0b898040803850657",
            "Redhat": "ami-2051294a"
          },
          "us-west-2": {
            "Linux": "ami-55a7ea65",
            "Redhat": "ami-7f634e4f"
          }
        },
        "OS2SSHPort": {
          "Linux": {
            "SSHPort": "22"
          },
          "Redhat": {
            "SSHPort": "22"
          }
        }
    },

    "Resources": {
        "LinuxEC2Instance": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
            "ImageId": {
              "Fn::FindInMap": [
                "RegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "OperatingSystem"
                }
              ]
            },
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "SecurityGroups": [
              {
                "Ref": "SecurityGroup"
              }
            ],
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash -ex\n",
                    "yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y\n",
                    "rpm -Uvh https://yum.puppet.com/puppet5/puppet5-release-el-7.noarch.rpm\n",
                    "yum install -y git python2-pip wget\n",
                    "pip install puppet-agent\n",
                    "export PATH=/opt/puppetlabs/bin:$PATH\n",
                    "cd /home/ec2-user\n",
                    "git clone https://gitlab.com/???????/squid-cloudformation.git\n",
                    "puppet config set server ${master_hostname} --section main\n",
                    "puppet resource service puppet ensure=running enable=true\n",
                    "touch executed-success\n",
                    "init 6\n",
                  ]
                ]
              }
            },
            "KeyName": {
              "Ref": "KeyPairName"
            },
            "Tags": [
              {
                "Key": {
                  "Ref": "TagKey"
                },
                "Value": {
                  "Ref": "TagValue"
                }
              }
            ],
          }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Enable HTTP access via port 80 and SSH access.",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "80",
                  "ToPort": "80",
                  "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": "0.0.0.0/0"
                  }
              ],
            }
        },
        "LoadBalancer": {
          "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
          "Properties": {
          "LoadBalancerName": "LoadBalancer",
          "Listeners": [
            {
              "InstancePort": 80,
              "InstanceProtocol": "HTTP",
              "LoadBalancerPort": 80,
              "Protocol": "HTTP"
            }
              ],
              "Scheme": "internet-facing",
              "SecurityGroups": [
                {
                  "Ref": "WebServerSG"
                }
            ],
            "Subnets": [
              {
                "Ref": "PublicSubnet"
              }
            ]
          }
        },
        "AppLaunchConfiguration": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
            "AssociatePublicIpAddress": true,
            "ImageId": {
              "Ref": "ImageId"
            },
            "InstanceType": "t2.micro",
            "SecurityGroups": []
        },
        "DependsOn": "VPCGatewayAttachment"
        },
        "AppASG": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
            "AvailabilityZones": [
              {
                "Ref": "AvailabilityZone"
              }
            ],
            "DesiredCapacity": 1,
            "LaunchConfigurationName": {
              "Ref": "AppLaunchConfiguration"
            },
            "LoadBalancerNames": [
              {
                "Ref": "LoadBalancer"
              }
            ],
            "MaxSize": 2,
            "MinSize": 1,
            "VPCZoneIdentifier": [
              {
                "Ref": "PublicSubnet"
              }
              ]
            },
            "UpdatePolicy": {
              "AutoScalingRollingUpdate": {
                "MinInstancesInService": 1
              }
            {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
                "Properties" : {
                    "HealthCheckEnabled" : Boolean,
                    "HealthCheckIntervalSeconds" : Integer,
                    "HealthCheckPath" : String,
                    "HealthCheckPort" : String,
                    "HealthCheckProtocol" : String,
                    "HealthCheckTimeoutSeconds" : Integer,
                    "HealthyThresholdCount" : Integer,
                    "Matcher" : Matcher,
                    "Name" : String,
                    "Port" : Integer,
                    "Protocol" : String,
                    "Tags" : [ Tag, ... ],
                    "TargetGroupAttributes" : [ TargetGroupAttribute, ... ],
                    "Targets" : [ TargetDescription, ... ],
                    "TargetType" : String,
                    "UnhealthyThresholdCount" : Integer,
                    "VpcId" : String
                  }
              } 
            }
        }

    }
}
